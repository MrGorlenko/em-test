basePath: /
definitions:
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.Task:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    required:
    - description
    - title
    type: object
  models.TaskLog:
    properties:
      created_at:
        type: string
      end_time:
        type: string
      id:
        type: integer
      start_time:
        type: string
      task_id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    required:
    - task_id
    - user_id
    type: object
  models.TaskTime:
    properties:
      hours:
        type: integer
      minutes:
        type: integer
      task_id:
        type: integer
      title:
        type: string
    type: object
  models.User:
    properties:
      address:
        type: string
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      passport_number:
        type: string
      patronymic:
        type: string
      surname:
        type: string
      updated_at:
        type: string
    required:
    - address
    - name
    - passport_number
    - patronymic
    - surname
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for managing users.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: User Management API
  version: "1.0"
paths:
  /tasklogs:
    get:
      consumes:
      - application/json
      description: Get a list of all task logs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TaskLog'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all task logs
      tags:
      - tasklogs
    post:
      consumes:
      - application/json
      description: Create a new task log with the input payload and set the start
        time
      parameters:
      - description: Task Log JSON
        in: body
        name: tasklog
        required: true
        schema:
          $ref: '#/definitions/models.TaskLog'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TaskLog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new task log
      tags:
      - tasklogs
  /tasklogs/{id}:
    get:
      consumes:
      - application/json
      description: Get a single task log by its ID
      parameters:
      - description: Task Log ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskLog'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get task log by ID
      tags:
      - tasklogs
  /tasklogs/{id}/complete:
    put:
      consumes:
      - application/json
      description: Set the end time for a task log
      parameters:
      - description: Task Log ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskLog'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Complete a task log
      tags:
      - tasklogs
  /tasks:
    get:
      consumes:
      - application/json
      description: Get a list of all tasks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a new user with the input payload
      parameters:
      - description: Task JSON
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new Task
      tags:
      - tasks
  /tasks/{id}:
    get:
      consumes:
      - application/json
      description: Get a single task by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get task by ID
      tags:
      - tasks
  /tasktimes:
    get:
      consumes:
      - application/json
      description: Get task times spent by a user for a given period, sorted by time
        spent in descending order
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: integer
      - description: Start Date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End Date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TaskTime'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get user task times for a period
      tags:
      - tasktimes
  /users:
    get:
      consumes:
      - application/json
      description: Get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the input payload
      parameters:
      - description: User JSON
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a single user by its ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a user
      tags:
      - users
swagger: "2.0"
